// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: service_banking_system.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BankingSystem_CreateUser_FullMethodName = "/pb.BankingSystem/CreateUser"
	BankingSystem_LoginUser_FullMethodName  = "/pb.BankingSystem/LoginUser"
)

// BankingSystemClient is the client API for BankingSystem service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BankingSystemClient interface {
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	LoginUser(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*LoginUserResponse, error)
}

type bankingSystemClient struct {
	cc grpc.ClientConnInterface
}

func NewBankingSystemClient(cc grpc.ClientConnInterface) BankingSystemClient {
	return &bankingSystemClient{cc}
}

func (c *bankingSystemClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, BankingSystem_CreateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankingSystemClient) LoginUser(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*LoginUserResponse, error) {
	out := new(LoginUserResponse)
	err := c.cc.Invoke(ctx, BankingSystem_LoginUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BankingSystemServer is the server API for BankingSystem service.
// All implementations must embed UnimplementedBankingSystemServer
// for forward compatibility
type BankingSystemServer interface {
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	LoginUser(context.Context, *LoginUserRequest) (*LoginUserResponse, error)
	mustEmbedUnimplementedBankingSystemServer()
}

// UnimplementedBankingSystemServer must be embedded to have forward compatible implementations.
type UnimplementedBankingSystemServer struct {
}

func (UnimplementedBankingSystemServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedBankingSystemServer) LoginUser(context.Context, *LoginUserRequest) (*LoginUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginUser not implemented")
}
func (UnimplementedBankingSystemServer) mustEmbedUnimplementedBankingSystemServer() {}

// UnsafeBankingSystemServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BankingSystemServer will
// result in compilation errors.
type UnsafeBankingSystemServer interface {
	mustEmbedUnimplementedBankingSystemServer()
}

func RegisterBankingSystemServer(s grpc.ServiceRegistrar, srv BankingSystemServer) {
	s.RegisterService(&BankingSystem_ServiceDesc, srv)
}

func _BankingSystem_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankingSystemServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankingSystem_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankingSystemServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankingSystem_LoginUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankingSystemServer).LoginUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankingSystem_LoginUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankingSystemServer).LoginUser(ctx, req.(*LoginUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BankingSystem_ServiceDesc is the grpc.ServiceDesc for BankingSystem service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BankingSystem_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.BankingSystem",
	HandlerType: (*BankingSystemServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _BankingSystem_CreateUser_Handler,
		},
		{
			MethodName: "LoginUser",
			Handler:    _BankingSystem_LoginUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_banking_system.proto",
}
